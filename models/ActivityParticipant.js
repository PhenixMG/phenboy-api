// --------------------------------------------------------
// üë• Mod√®le repr√©sentant un participant √† une activit√© Discord.
// Chaque participant est associ√© √† une activit√© (Activity).
// --------------------------------------------------------

const { DataTypes } = require('sequelize');
const { sequelize } = require('../db/database');
const Activity = require('./Activity'); // Pour la cl√© √©trang√®re vers Activity

// D√©finition du mod√®le ActivityParticipant
const ActivityParticipant = sequelize.define('ActivityParticipant', {
    /**
     * Cl√© primaire UUID auto-g√©n√©r√©e pour chaque participant
     */
    id: {
        type: DataTypes.UUID,
        defaultValue: DataTypes.UUIDV4,
        primaryKey: true
    },

    /**
     * Cl√© √©trang√®re vers l'activit√© associ√©e
     */
    activityId: {
        type: DataTypes.UUID,
        allowNull: false,
        references: {
            model: 'activities',  // Table SQL 'activities'
            key: 'id'
        },
        onDelete: 'CASCADE',  // Supprime le participant si l'activit√© est supprim√©e
        onUpdate: 'CASCADE',  // Met √† jour en cascade si l'ID change
        comment: 'R√©f√©rence √† l\'activit√© (FK)'
    },

    /**
     * ID Discord (ou autre) de l'utilisateur participant
     */
    userId: {
        type: DataTypes.STRING,
        allowNull: false,
        comment: 'ID Discord de l\'utilisateur participant'
    }
}, {
    // Options du mod√®le
    tableName: 'activity_participants',  // Nom de la table en base
    timestamps: true,                    // Ajoute createdAt et updatedAt
    comment: 'Participants associ√©s √† une activit√© Discord'
});

module.exports = ActivityParticipant;
